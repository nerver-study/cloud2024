
懒汉式（线程安全）：
使用 synchronized 关键字确保多线程环境下的安全性。
缺点是每次调用 getInstance 方法都会同步，性能较差。

懒汉式（双重检查锁定）：
只在第一次创建实例时进行同步，提高了性能。
使用 volatile 关键字确保可见性和有序性。

饿汉式：
在类加载时就创建实例，无需同步。
缺点是无法实现延迟加载。

静态内部类：
结合了懒汉式和饿汉式的优点，既实现了延迟加载，又保证了线程安全。
利用了 Java 类加载机制的特性，确保实例化只发生一次。
希望这些示例对你有所帮助！如果有任何疑问或需要进一步的解释，请随时告诉我。